/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   executor.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tcasale <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/03 15:30:09 by tcasale           #+#    #+#             */
/*   Updated: 2023/03/10 00:54:46 by tcasale          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../headers/minishell.h"

void	execute_line(t_parser *parser)
{
	t_list	*cmds;

	cmds = NULL;
	get_cmd_from_ast(parser, cmds);
	ft_printf("c\n");
	print_cmds(cmds);
}

void	get_cmd_from_ast(t_parser *parser, t_list *cmds)
{
	t_ast	*ast;

	parser->actual = parser->ast;
	parser->actual_pipe = 0;
	while (parser->actual)
	{
		ast = (t_ast *)parser->actual;
		if (ast->type == CMD_NODE)
		{
		printf("commande \n");
			while (parser->actual && (ast->type == ARG_NODE || ast->type == CMD_NODE))
			{
				ast = (t_ast *)parser->actual;
				shape_cmd_from_ast(cmds, ast);
				parser->actual = get_next_ast_node(parser);
			}
		}
		parser->actual = get_next_ast_node(parser);
	}
}

void	shape_cmd_from_ast(t_list *cmds, t_ast *ast)
{
	t_cmd	*actual_cmd;

	if (ast->type == CMD_NODE)
	{
		actual_cmd = (t_cmd *)malloc(sizeof(t_cmd));
		ft_lstadd_back(&cmds, ft_lstnew(actual_cmd));
		printf("commande \n");
	}
	if (ast->type == CMD_NODE || ast->type == ARG_NODE)
		ft_lstadd_back(&actual_cmd->list, ft_lstnew(ast->content));
}
